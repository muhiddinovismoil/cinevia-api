// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleTypes {
  USER
  ADMIN

  @@map("role_types")
}

enum MovieTypes {
  MOVIE
  SERIES
  CARTOON

  @@map("movie_types")
}

enum UploadTypes {
  LOCAL
  EXTERNAL

  @@map("upload_types")
}

enum WatchStatus {
  WATCHING
  COMPLETED
  PLAN_TO_WATCH

  @@map("watch_status")
}

model User {
  id       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email    String    @unique @db.VarChar(255)
  fullname String    @db.VarChar(100)
  password String    @db.VarChar(255)
  role     RoleTypes @default(USER)
  photo    String?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  watchHistory WatchHistory[]
  ratings      Rating[]
  favorites    Favorite[]

  @@map("users")
}

model Category {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @unique @db.VarChar(100)
  slug String @unique @db.VarChar(120)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  movies Movie[]

  @@map("categories")
}

model Movie {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String      @db.VarChar(255)
  description String?     @db.Text
  slug        String      @unique @db.VarChar(300)
  thumbnail   String?
  type        MovieTypes
  uploadType  UploadTypes @map("upload_type")
  source      String
  duration    Int?        @db.Integer
  releaseYear Int?        @map("release_year")
  country     String?     @db.VarChar(100)
  director    String?     @db.VarChar(255)
  cast        String?     @db.Text
  imdbRating  Float?      @map("imdb_rating") @db.Real

  viewCount     Int   @default(0) @map("view_count")
  averageRating Float @default(0) @map("average_rating") @db.Real

  categoryId String @map("category_id") @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  category     Category       @relation(fields: [categoryId], references: [id])
  seasons      Season[]
  watchHistory WatchHistory[]
  ratings      Rating[]
  favorites    Favorite[]

  @@index([type])
  @@index([categoryId])
  @@index([averageRating])
  @@map("movies")
}

model Season {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title   String @db.VarChar(255)
  number  Int    @db.Integer
  movieId String @map("movie_id") @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  movie    Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)
  episodes Episode[]

  @@unique([movieId, number])
  @@map("seasons")
}

model Episode {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String      @db.VarChar(255)
  number     Int         @db.Integer
  uploadType UploadTypes @map("upload_type")
  source     String
  duration   Int?        @db.Integer
  thumbnail  String?
  seasonId   String      @map("season_id") @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  season       Season         @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  watchHistory WatchHistory[]

  @@unique([seasonId, number])
  @@map("episodes")
}

model WatchHistory {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String      @map("user_id") @db.Uuid
  movieId         String      @map("movie_id") @db.Uuid
  episodeId       String?     @map("episode_id") @db.Uuid
  watchedDuration Int         @default(0) @map("watched_duration")
  isCompleted     Boolean     @default(false) @map("is_completed")
  status          WatchStatus @default(WATCHING)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie   Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  episode Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId, episodeId])
  @@map("watch_history")
}

model Rating {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId  String  @map("user_id") @db.Uuid
  movieId String  @map("movie_id") @db.Uuid
  rating  Int     @db.SmallInt
  review  String? @db.Text

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
  @@map("ratings")
}

model Favorite {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId  String @map("user_id") @db.Uuid
  movieId String @map("movie_id") @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
  @@map("favorites")
}
